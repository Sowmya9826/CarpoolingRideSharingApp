package com.carpoolapp.carpoolService.dto;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class UserDtoTest {

    private UserDto userDto;

    private final String firstName = "John";
    private final String lastName = "Doe";
    private final String emailId = "john.doe@example.com";
    private final String phoneNumber = "1234567890";
    private final String password = "password123";
    private final String dob = "1990-01-01";

    @BeforeEach
    void setUp() {
        userDto = new UserDto();
        userDto.setFirstName(firstName);
        userDto.setLastName(lastName);
        userDto.setEmailId(emailId);
        userDto.setPhoneNumber(phoneNumber);
        userDto.setPassword(password);
        userDto.setDob(dob);
    }

    @Test
    void testGettersAndSetters() {
        // Test getters
        assertEquals(firstName, userDto.getFirstName());
        assertEquals(lastName, userDto.getLastName());
        assertEquals(emailId, userDto.getEmailId());
        assertEquals(phoneNumber, userDto.getPhoneNumber());
        assertEquals(password, userDto.getPassword());
        assertEquals(dob, userDto.getDob());

        // Test setters
        userDto.setFirstName("Jane");
        userDto.setLastName("Smith");
        userDto.setEmailId("jane.smith@example.com");
        userDto.setPhoneNumber("0987654321");
        userDto.setPassword("newPassword123");
        userDto.setDob("1992-02-02");

        assertEquals("Jane", userDto.getFirstName());
        assertEquals("Smith", userDto.getLastName());
        assertEquals("jane.smith@example.com", userDto.getEmailId());
        assertEquals("0987654321", userDto.getPhoneNumber());
        assertEquals("newPassword123", userDto.getPassword());
        assertEquals("1992-02-02", userDto.getDob());
    }

    @Test
    void testConstructor() {
        // Test constructor via setter
        UserDto userDto2 = new UserDto();
        userDto2.setFirstName(firstName);
        userDto2.setLastName(lastName);
        userDto2.setEmailId(emailId);
        userDto2.setPhoneNumber(phoneNumber);
        userDto2.setPassword(password);
        userDto2.setDob(dob);

        // Verify if all fields are initialized correctly
        assertNotNull(userDto2);
        assertEquals(firstName, userDto2.getFirstName());
        assertEquals(lastName, userDto2.getLastName());
        assertEquals(emailId, userDto2.getEmailId());
        assertEquals(phoneNumber, userDto2.getPhoneNumber());
        assertEquals(password, userDto2.getPassword());
        assertEquals(dob, userDto2.getDob());
    }

    @Test
    void testEqualsAndHashCode() {
        // Create another UserDto with the same values
        UserDto userDto2 = new UserDto();
        userDto2.setFirstName(firstName);
        userDto2.setLastName(lastName);
        userDto2.setEmailId(emailId);
        userDto2.setPhoneNumber(phoneNumber);
        userDto2.setPassword(password);
        userDto2.setDob(dob);

        // Test equality
        assertEquals(userDto, userDto2);
        assertEquals(userDto.hashCode(), userDto2.hashCode());

        // Modify userDto2 and test inequality
        userDto2.setPhoneNumber("1122334455");
        assertNotEquals(userDto, userDto2);
    }

    @Test
    void testToString() {
        String expectedString = "UserDto(firstName=John, lastName=Doe, emailId=john.doe@example.com, " +
                "phoneNumber=1234567890, password=password123, dob=1990-01-01)";
        // The expected output should be a string representation of the object as generated by Lombok's @Data annotation
        assertTrue(userDto.toString().contains("firstName=John"));
        assertTrue(userDto.toString().contains("lastName=Doe"));
        assertTrue(userDto.toString().contains("emailId=john.doe@example.com"));
        assertTrue(userDto.toString().contains("phoneNumber=1234567890"));
        assertTrue(userDto.toString().contains("password=password123"));
        assertTrue(userDto.toString().contains("dob=1990-01-01"));
    }
}
